version = '1.0'

allprojects {
    apply plugin: 'idea'
    idea.module.outputDir file("out/production/classes")
}

subprojects {
    apply plugin: 'java'
    group = 'nl.edulogo'
    sourceCompatibility = 1.10
    repositories {
        mavenCentral()
    }
    afterEvaluate {
        compileJava {
            if (project.hasProperty("moduleName")) {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                    ]
                    classpath = files()
                }
            }
        }

        compileTestJava {
            if (project.hasProperty("moduleName")) {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'junit',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                    ]
                    classpath = files()
                }
            }
        }

        test {
            if (project.hasProperty("moduleName")) {
                inputs.property("moduleName", moduleName)
                doFirst {
                    jvmArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'ALL-MODULE-PATH',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                    ]
                    classpath = files()
                }
            }
        }
    }

    //Default dependencies for all
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

project(':Core') {
    version = '1.0'
    ext.moduleName = 'edulogo.core'

    dependencies {
    }
}

project(':Display') {
    version = '1.0'
    ext.moduleName = 'edulogo.display'

    dependencies {
        compile project(':Core')
    }
}

project(':JavaLogo') {
    version = '1.0'
    ext.moduleName = 'edulogo.javalogo'

    dependencies {
        compile project(':Core')
        compile project(':Display')
        compile project(':Logo')
    }
}

project(':Editor') {
    version = '1.0'
    ext.moduleName = 'edulogo.editor'

    dependencies {
        compile project(':Core')
        compile project(':Display')
    }
}

project(':ACSLogo') {
    version = '1.0'
    ext.moduleName = 'edulogo.acslogo'
    ext.mainClassName = 'nl.edulogo.acslogo.ACSLogo'
    ext.appName = 'EduScript'

    dependencies {
        compile project(':Core')
        compile project(':Display')
        compile project(':Editor')
        compile project(':Logo')
    }

    task dist(type: Jar) {
        from files(sourceSets.main.output.classesDir)
        from files(sourceSets.main.output.resourcesDir)
        from {configurations.compile.collect {zipTree(it)}}

        manifest {
            attributes 'Main-Class': project.mainClassName
        }
    }

    dist.dependsOn classes

// creates application bundle (executable + runtime)
    task javaPackager(type: Exec, dependsOn: dist) {
        workingDir project.projectDir
        def commands = [
                'javapackager',
                '-deploy',
                '-nosign',
                '-outdir', "${buildDir}/distribution",
                '-srcdir', "${buildDir}/libs",
                '-native', 'image',
                '-name', project.appName,
                '-appclass', project.mainClassName
        ]

        commandLine = commands
    }

// removes bloated runtime created by javapackager
    task cleanPackagerRuntime(dependsOn: javaPackager) {
        doLast() {
            File runtimeFile = new File("${buildDir}/distribution/${project.appName}/runtime")
            runtimeFile.deleteDir()
            System.out.println("deleting bloated runtime in " + runtimeFile)
        }
    }

// creates a replacement runtime via jlink command (much smaller than jpackager)
    task createFinalAppBundle(type: Exec, dependsOn: [cleanPackagerRuntime]) {
        def jdk = System.getProperty("java.home")

        workingDir project.projectDir
        commandLine = [
                'jlink',
                '-p', "${jdk}/jmods",
                '--add-modules', 'java.base,java.desktop,jdk.unsupported',
                '--strip-debug',
                '--no-header-files',
                '--no-man-pages',
                '--strip-native-commands',
                "--vm=server",
                "--compress=2",
                '--output', "${buildDir}/distribution/${project.appName}/runtime"
        ]

        doLast{
            System.out.println("Application '${project.name}' packaged.")
            System.out.println(" -> location: ${buildDir}/distribution/${project.name}/")
        }
    }
}

project(':Logo') {
    version = '1.0'
    ext.moduleName = 'edulogo.logo'

    dependencies {
        compile project(':Core')
    }
}